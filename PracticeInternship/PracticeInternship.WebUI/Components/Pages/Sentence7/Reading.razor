@page "/sentence7/reading"
@inject PracticeInternship.Application.Interfaces.Interface_DM_Kho KhoInterface
@inject PracticeInternship.Application.Interfaces.Interface_DM_NCC NCCInterface
@inject PracticeInternship.Application.Interfaces.Interface_DM_Nhap_Kho NhapKhoInterface
@using PracticeInternship.Domain.Entities
@using PracticeInternship.WebUI.Components.Pages.Sentence1
@rendermode InteractiveServer
@inject IModalService model
@inject NavigationManager NavigationManager


<PageTitle>Sentence 7</PageTitle>

<h1>Quản lí phiếu nhập</h1>

@if (nhapKhos == null)
{
    <p><em>Loading...</em></p>
    <div class="d-flex justify-content-end">
        <a href="sentence7/createData" class="btn btn-primary">+ Tạo mới phiếu nhập</a>
    </div>
}
else
{
    <div class="d-flex justify-content-end">
        <a href="sentence7/createData" class="btn btn-primary">+ Tạo mới phiếu nhập</a>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Số phiếu nhập</th>
                <th>Nhà cung cấp</th>
                <th>Kho</th>
                <th>Ngày nhập kho</th>
                <th>Trạng thái</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in nhapKhos)
            {
                <tr>
                    <td>@forecast.So_Phieu_Nhap_Kho</td>
                    <td>
                        @nccs!.FirstOrDefault(ncc => ncc.Id == forecast.NCC_Id)!.Ten_NCC
                    </td>
                    <td>
                        @khos!.FirstOrDefault(kho => kho.Id == forecast.Kho_Id)!.Ten_Kho
                    </td>
                    <td>@forecast.Ngay_Nhap_kho</td>
                    <td>
                        <button class="bg-danger btn rounded-1 shadow-none" @onclick="() => DeleteDialog(forecast)" ms-3>Delete</button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
<DeleteConfirmDialog Show="ShowDialog" OnCancel="CancelDelete" OnDelete="DeleteKho" />


@code {
    // dialog
    [Parameter]
    public required DM_Nhap_Kho? dM_Nhap_Kho { get; set; }
    [Parameter]
    public bool ShowDialog { get; set; }
    public void DeleteDialog(DM_Nhap_Kho dmNhapKho)
    {
        dM_Nhap_Kho = dmNhapKho;
        ShowDialog = true;
    }
    public void CancelDelete()
    {
        dM_Nhap_Kho = null;
        ShowDialog = false;
    }
    public async void DeleteKho()
    {
        await NhapKhoInterface.DeleteAsync(dM_Nhap_Kho!);
        ShowDialog = false;
        nhapKhos = await NhapKhoInterface.GetAllAsync();
        StateHasChanged();
    }


    public IEnumerable<DM_Kho>? khos { get; set; }
    public IEnumerable<DM_NCC>? nccs { get; set; }
    public IEnumerable<DM_Nhap_Kho>? nhapKhos { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        nccs = await NCCInterface.GetAllAsync();
        khos = await KhoInterface.GetAllAsync();
        nhapKhos = await NhapKhoInterface.GetAllAsync();
    }
}
