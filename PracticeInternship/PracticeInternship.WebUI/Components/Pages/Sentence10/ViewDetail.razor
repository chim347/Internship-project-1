@page "/sentence10/ViewDetail/{id:Guid}"
@using System.Globalization
@using PracticeInternship.Application.DTOs
@using PracticeInternship.WebUI.Components.Pages.Sentence1
@using ClosedXML.Excel;
@inject IJSRuntime JSRuntime
@inject PracticeInternship.Application.Interfaces.Interface_DM_Nhap_Kho NhapKhoInterface
@inject PracticeInternship.Application.Interfaces.Interface_DM_Kho KhoInterface
@inject PracticeInternship.Application.Interfaces.Interface_DM_NCC NCCInterface
@inject PracticeInternship.Application.Interfaces.Interface_DM_Nhap_Kho_Raw_Data DMNhapKhoRawDataInterface
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Thông tin phiếu nhập kho</PageTitle>
<div class="row mb-4 justify-content-end">
    <div class="col-auto">
        <button style="width: 150px;" class="btn btn-primary" @onclick="ExportToExcel">Xuất Excel</button>
    </div>
</div>
@{
    var culture = CultureInfo.GetCultureInfo("en-US");
    culture = (CultureInfo)culture.Clone();
    culture.NumberFormat.CurrencySymbol = "";
}
@if (dM_Nhap_Kho_Detail_Response != null)
{

    <div class="row">
        <div class="col">
            <div>Đơn vị: </div>
            <div>Bộ phận: </div>
            <div>@dM_Nhap_Kho_Detail_Response!.Ngay_Nhap_kho.ToString("'Ngày' dd 'tháng' MM 'năm' yyyy", CultureInfo.GetCultureInfo("vi-VN"))</div>
            <div>Số phiếu nhập: @dM_Nhap_Kho_Detail_Response!.So_Phieu_Nhap_Kho</div>
        </div>
        <div class="col">
            <h2 class="d-flex justify-content-center fw-bold">PHIẾU NHẬP KHO</h2>
            <div class="text-end" style="margin-right: 30px;">Nợ: ...................................................</div>
            <div class="text-end" style="margin-right: 30px;">Có: ...................................................</div>
        </div>
        <div class="col">
            <h3 class="text-end fw-bold">Mẫu số : 01 - VT</h3>
            <div class="text-end" style="font-size:13px; margin-left:150px;">(Ban Hành theo QĐ Số 15/2006/QĐ-BTC Ngày 20/03/2006 của Bộ Trưởng BTC)</div>
        </div>
    </div>
    <div style="margin-top: -6px;">Họ tên người giao hàng: </div>
    <div class="row">
        <div class="col">
            <div>Theo TK số: </div>
            <div class="mb-2">Nhập tại kho: @dM_Nhap_Kho_Detail_Response!.Ten_Kho</div>
        </div>
        <div class="col">
            <div>@dM_Nhap_Kho_Detail_Response!.Ngay_Nhap_kho.ToString("'Ngày' dd 'tháng' MM 'năm' yyyy", CultureInfo.GetCultureInfo("vi-VN")) của ...</div>
            <div>Địa Điểm: </div>
        </div>
        <div class="col"></div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered text-center align-middle">
            <thead class="table-primary">
                <tr>
                    <th style="width: 50px;">STT</th>
                    <th style="width: 325px;">Tên nhãn hiệu, quy cách, phẩm chất, vật tư, dụng cụ, sản phẩm, hàng hóa</th>
                    <th style="width: 175px;">Mã sản phẩm</th>
                    <th style="width: 145px;">Đơn vị tính</th>
                    <th style="width: 100px;">Số lượng</th>
                    <th style="width: 125px;">Đơn giá</th>
                    <th style="width: 175px;">Thành tiền</th>
                </tr>
            </thead>
            <tbody>
                <tr class="table-primary">
                    <td>
                        A
                    </td>
                    <td>B</td>
                    <td>C</td>
                    <td>D</td>
                    <td>1</td>
                    <td>2</td>
                    <td>
                        3
                    </td>
                </tr>
                @if (dM_Nhap_Kho_Raw_Data_Response != null)
                {
                    var count = 0;
                    @foreach (var product in dM_Nhap_Kho_Raw_Data_Response)
                    {
                        <tr>
                            <td>
                                @{
                                    count = count + 1;
                                }
                                @count
                            </td>
                            <td>@product.Ten_San_Pham</td>
                            <td>@product.Ma_San_Pham</td>
                            <td>@product.Ten_Don_Vi_Tinh</td>
                            <td>@product.SL_Nhap</td>
                            <td>@product.Don_Gia_Nhap.ToString("C", culture)</td>
                            <td>
                                @{
                                    var total = product.SL_Nhap * product.Don_Gia_Nhap;
                                    var format = total.ToString("C", culture);
                                }
                                @format
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6"><em>Không có dữ liệu</em></td>
                    </tr>
                }
            </tbody>
            <tfoot class="table-primary">
                <tr>
                    <td colspan="4" class="fw-bold">Tổng</td>
                    <td class="fw-bold">
                        @{
                            var sumSLNhap = 0;
                        }
                        @if (dM_Nhap_Kho_Raw_Data_Response != null && dM_Nhap_Kho_Raw_Data_Response.Any())
                        {
                            @* dM_Nhap_Kho_Raw_Data_Response.Sum(p => p.SL_Nhap); *@

                            @foreach (var product in dM_Nhap_Kho_Raw_Data_Response)
                            {
                                sumSLNhap = sumSLNhap + product.SL_Nhap;
                            }
                        }
                        @sumSLNhap
                    </td>
                    <td></td>
                    <td class="fw-bold">
                        @{
                            decimal sumDonGiaNhap = 0;
                        }
                        @if (dM_Nhap_Kho_Raw_Data_Response != null)
                        {
                            @* dM_Nhap_Kho_Raw_Data_Response.Sum(p => p.SL_Nhap * p.Don_Gia_Nhap).ToString("C", CultureInfo.GetCultureInfo("vi-VN")); *@
                            @foreach (var product in dM_Nhap_Kho_Raw_Data_Response)
                            {
                                sumDonGiaNhap = sumDonGiaNhap + (product.SL_Nhap * product.Don_Gia_Nhap);
                            }
                        }
                        @sumDonGiaNhap.ToString("C", culture)
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    <div class="row">
        <div class="d-flex align-items-center">
            <div class="fw-bold">Tổng Số Tiền (Viết bằng chữ) : </div>
            <div class="fw-bold" style="margin-left: 20px;">@NumberToWords(sumDonGiaNhap)</div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">
            <div class="fw-bold">Số Chứng Từ Gốc Kèm Theo: </div>
        </div>
        <div class="col" style="font-size: 14px;">Ngày  .......  Tháng  .......  Năm  .......</div>
    </div>

    <div class="row text-center">
        <div class="col">
            <div class="fw-bold">
                Người Lập Phiếu
            </div>
            <div style="font-size: 14px;">
                (Ký, họ tên)
            </div>
        </div>

        <div class="col">
            <div class="fw-bold">
                Người Giao Hàng
            </div>
            <div style="font-size: 14px;">
                (Ký, họ tên)
            </div>
        </div>

        <div class="col">
            <div class="fw-bold">
                Thủ Kho
            </div>
            <div style="font-size: 14px;">
                (Ký, họ tên)
            </div>
        </div>

        <div class="col">
            <div class="fw-bold">
                Kế Toán Trưởng
            </div>
            <div style="font-size: 14px;">
                (Ký, họ tên)
            </div>
        </div>
    </div>
}

@code {
    #region View detail
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    public DM_Nhap_Kho_Detail_Response? dM_Nhap_Kho_Detail_Response { get; set; }
    public ICollection<DM_Nhap_Kho_Raw_Data_Response>? dM_Nhap_Kho_Raw_Data_Response { get; set; }
    public IEnumerable<DM_Kho>? khos { get; set; }
    public IEnumerable<DM_NCC>? nccs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dM_Nhap_Kho_Detail_Response ??= await NhapKhoInterface.GetDetailOfNhapKhoById(Guid.Parse(Id!));
        dM_Nhap_Kho_Raw_Data_Response = dM_Nhap_Kho_Detail_Response.List_DM_Nhap_Kho_Raw_Data_Response;
        khos = await KhoInterface.GetAllAsync();
        nccs = await NCCInterface.GetAllAsync();
    }
    #endregion

    #region ConvertCurrencyText helper
    public static string NumberToWords(decimal number)
    {
        if (number == 0)
            return "không đồng";

        string[] units = { "", "một", "hai", "ba", "bốn", "năm", "sáu", "bảy", "tám", "chín" };
        string[] levels = { "", "nghìn", "triệu", "tỷ" };

        string result = "";
        int levelIndex = 0;

        long integerPart = (long)Math.Floor(number); // Lấy phần nguyên
        int fractionalPart = (int)((number - integerPart) * 100); // Lấy phần thập phân (2 chữ số)

        while (integerPart > 0)
        {
            int group = (int)(integerPart % 1000); // Lấy từng nhóm 3 số
            integerPart /= 1000;

            if (group > 0)
            {
                string groupWords = ConvertGroupToWords(group, units);
                result = $"{groupWords} {levels[levelIndex]} {result}".Trim();
            }

            levelIndex++;
        }

        result = $"{result.Trim()} USD";

        if (fractionalPart > 0)
        {
            result += $" và {ConvertGroupToWords(fractionalPart, units)} xu";
        }

        return char.ToUpper(result[0]) + result.Substring(1).Trim();
    }

    private static string ConvertGroupToWords(int group, string[] units)
    {
        string result = "";

        int hundreds = group / 100;
        int tens = (group % 100) / 10;
        int ones = group % 10;

        if (hundreds > 0)
            result += $"{units[hundreds]} trăm ";

        if (tens > 1)
        {
            result += $"{units[tens]} mươi ";
            if (ones > 0)
                result += units[ones];
        }
        else if (tens == 1)
        {
            result += "mười ";
            if (ones > 0)
                result += units[ones];
        }
        else
        {
            if (ones > 0)
                result += $"lẻ {units[ones]}";
        }

        return result.Trim();
    }
    #endregion

    #region export excel file
    private async Task ExportToExcel()
    {
        using var workbook = new ClosedXML.Excel.XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Phiếu Nhập Kho");
        int row = 1;
        decimal sumTriGia = 0;
        int sumSL_Nhap = 0;
        var culture = CultureInfo.GetCultureInfo("en-US");
        culture = (CultureInfo)culture.Clone();
        culture.NumberFormat.CurrencySymbol = "";
        worksheet.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.White;

        // Header
        worksheet.Cell(row, 1).Value = "STT";
        worksheet.Cell(row, 2).Value = "Tên Sản Phẩm";
        worksheet.Cell(row, 3).Value = "Mã Sản Phẩm";
        worksheet.Cell(row, 4).Value = "Đơn Vị Tính";
        worksheet.Cell(row, 5).Value = "Số Lượng";
        worksheet.Cell(row, 6).Value = "Đơn Giá";
        worksheet.Cell(row, 7).Value = "Thành Tiền";

        var headerRange = worksheet.Range(row, 1, row, 7);
        headerRange.Style.Font.Bold = true;
        headerRange.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.LightGray;
        headerRange.Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
        headerRange.Style.Alignment.Vertical = ClosedXML.Excel.XLAlignmentVerticalValues.Center;
        // Set border color to black
        headerRange.Style.Border.OutsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
        headerRange.Style.Border.OutsideBorderColor = ClosedXML.Excel.XLColor.Black;
        headerRange.Style.Border.InsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
        headerRange.Style.Border.InsideBorderColor = ClosedXML.Excel.XLColor.Black;

        // Data
        if (dM_Nhap_Kho_Raw_Data_Response != null)
        {
            foreach (var product in dM_Nhap_Kho_Raw_Data_Response)
            {
                row++;
                worksheet.Cell(row, 1).Value = row - 1;
                worksheet.Cell(row, 2).Value = product.Ten_San_Pham;
                worksheet.Cell(row, 3).Value = product.Ma_San_Pham;
                worksheet.Cell(row, 4).Value = product.Ten_Don_Vi_Tinh;
                worksheet.Cell(row, 5).Value = product.SL_Nhap;
                worksheet.Cell(row, 6).Value = product.Don_Gia_Nhap.ToString("C", culture);
                worksheet.Cell(row, 7).Value = (product.SL_Nhap * product.Don_Gia_Nhap).ToString("C", culture);
                sumTriGia = sumTriGia + (product.SL_Nhap * product.Don_Gia_Nhap);
                sumSL_Nhap = sumSL_Nhap + product.SL_Nhap;

                worksheet.Cell(row, 6).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
                worksheet.Cell(row, 7).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
                var dataRange = worksheet.Range(row, 1, row, 7);
                dataRange.Style.Border.OutsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
                dataRange.Style.Border.OutsideBorderColor = ClosedXML.Excel.XLColor.Black;
                dataRange.Style.Border.InsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
                dataRange.Style.Border.InsideBorderColor = ClosedXML.Excel.XLColor.Black;
            }
        }

        row++;
        worksheet.Range(row, 1, row, 4).Merge().Value = "Tổng";
        worksheet.Range(row, 1, row, 4).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;

        worksheet.Cell(row, 5).Value = sumSL_Nhap.ToString("C", culture);
        worksheet.Cell(row, 5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;

        worksheet.Cell(row, 7).Value = sumTriGia.ToString("C", culture);
        worksheet.Cell(row, 7).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;


        var totalRange = worksheet.Range(row, 1, row, 7);
        totalRange.Style.Font.Bold = true;
        totalRange.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.LightGray;
        totalRange.Style.Border.OutsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
        totalRange.Style.Border.OutsideBorderColor = ClosedXML.Excel.XLColor.Black;
        totalRange.Style.Border.InsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
        totalRange.Style.Border.InsideBorderColor = ClosedXML.Excel.XLColor.Black;
        worksheet.Rows().Height = 20;

        worksheet.Columns().AdjustToContents();

        // Set specific width and height for columns and rows
        worksheet.Column(1).Width = 5;  // STT
        worksheet.Column(2).Width = 25; // Tên Sản Phẩm
        worksheet.Column(3).Width = 15; // Mã Sản Phẩm
        worksheet.Column(4).Width = 15; // Đơn Vị Tính
        worksheet.Column(5).Width = 10; // Số Lượng
        worksheet.Column(6).Width = 15; // Đơn Giá
        worksheet.Column(7).Width = 15; // Thành Tiền

        worksheet.Rows().Height = 20;

        // Add content below the table
        row += 2; // Skip 2 rows after the table
        worksheet.Range(row, 1, row, 7).Merge().Value = $"Tổng Số Tiền (Viết bằng chữ):  {NumberToWords(sumTriGia)}";
        worksheet.Range(row, 1, row, 7).Style.Font.Bold = true;
        worksheet.Rows().Height = 20;

        // Add "Số Chứng Từ Gốc Kèm Theo"
        row++;
        worksheet.Range(row, 1, row, 4).Merge().Value = "Số Chứng Từ Gốc Kèm Theo: ";
        worksheet.Range(row, 1, row, 4).Style.Font.Bold = true;
        worksheet.Range(row, 5, row, 7).Merge().Value = "Ngày ....... Tháng ....... Năm .......";
        worksheet.Range(row, 5, row, 7).Style.Font.Italic = true;
        worksheet.Rows().Height = 20;

        // Add Signature rows
        row += 3;
        worksheet.Cell(row, 2).Value = "Người Lập Phiếu";
        worksheet.Cell(row + 1, 2).Value = "(Ký, họ tên)";
        worksheet.Cell(row, 4).Value = "Người Giao Hàng";
        worksheet.Cell(row + 1, 4).Value = "(Ký, họ tên)";
        worksheet.Cell(row, 6).Value = "Thủ Kho";
        worksheet.Cell(row + 1, 6).Value = "(Ký, họ tên)";
        worksheet.Cell(row, 8).Value = "Kế Toán Trưởng";
        worksheet.Cell(row + 1, 8).Value = "(Ký, họ tên)";

        worksheet.Range(row, 1, row + 1, 8).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
        worksheet.Range(row, 1, row + 1, 8).Style.Alignment.Vertical = ClosedXML.Excel.XLAlignmentVerticalValues.Center;
        worksheet.Range(row, 1, row + 1, 8).Style.Font.FontSize = 12;

        worksheet.PageSetup.FitToPages(1, 1);
        worksheet.PageSetup.Margins.Top = 0.5;
        worksheet.PageSetup.Margins.Bottom = 0.5;
        worksheet.PageSetup.Margins.Left = 0.5;
        worksheet.PageSetup.Margins.Right = 0.5;

        // Export to memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        // Trigger file download
        var fileName = $"PhieuNhapKho_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        var fileBytes = stream.ToArray();
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }
    #endregion
}


